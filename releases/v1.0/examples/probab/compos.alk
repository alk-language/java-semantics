/*
  Solovay and Strassen's algorithm for compositionality
*/

gcd(a, b)
{
  while (a != 0 && b != 0) {
    if (a > b) a = a % b;
    else b = b % a;
  }
  return a + b;
}

swap(out a, out b)
{
  temp = a;
  a = b;
  b = temp;
}


jacobi(a,n)
/*
  n is odd and 0 < a < n
*/
{
  j = 1; 
  while (a != 0) {
    while (a % 2 == 0) {  // a is even
      a = a / 2;
      if (n % 8 == 3 || n % 8 == 5) j = 0-j;
    }
    swap(a, n);
    if (a % 4 == 3 && n % 4 == 3) j = 0-j;
    a = a % n;
  }
  if (n == 1) return j;
  else return 0;
}

/*
j1 = jacobi(8, 15);  // 1
j2 = jacobi(9, 15);  // 0
j3 = jacobi(2, 9);   // 1
j4 = jacobi(2, 15);  // 1
j5 = jacobi(2, 11);  // -1
j6 = jacobi(2, 13);  // -1

j7 = jacobi(4, 9);   // 1
j8 = jacobi(8, 9);   // 1 = j3*j7
j9 = jacobi(1001, 9907); // -1
j10 = jacobi(21, 59);    // 1
j11 = jacobi(21, 57);    // 0
j12 = jacobi(1236, 20003); // 1
*/

/*
input: a, n, p - positive integers
output: a^n (mod p)
*/
power(a, n, p)
{
/*
// recursive version
  if (n == 0) return 1;
  else if(n == 1) return a % p;
  else {
    x = power(a, n/2, p);
    if (n % 2 == 0) return (x * x) % p;
    return (a*x*x) % p;
  }
*/
// non-recursive version
  x = 1;
  while (n > 0)
    if (n % 2 == 0) {
      a = (a * a) % p ;
      n = n / 2;
    }
    else {
      x = (a * x) % p;
      n = n - 1;
    }
  return x;
}

/*
a1 = power(3, 15060/2, 15061);  // 1
a2 = power(2358, 15060/2, 15061); // 1
*/

isComp(n)
{
  a = random(n-3) + 2;
  if (gcd(a, n) != 1) return "composite";
  x = jacobi(a, n);
  if (x < 0) x = x + n;
  if (x != power(a, (n-1)/2, n)) return "composite";
  return "may be prime";
}

/*
m1[0] = 2147483647*457241;
m1[1] = isComp(m1[0]);

m2[0] = 2147483647;
m2[1] = isComp(m2[0]);
*/

isProbPrime(n, k) {
  while (k > 0 && isComp(n) != "composite")
    --k;
  if (k == 0) return "probably prime";
  return "composite";
}

/*
x = 1;
for (i = 1; i < 120; ++i) x *= 2;

for (i = 120; i < 130; ++i) { 
  x *= 2;
  m3[0] = x - 1;
  m3[1] = isProbPrime(m3[0], 100);
  print(m3);
}

*/

/*
m3[0] = 170141183460469231731687303715884105727;
m3[1] = isProbPrime(m3[0], 100);
*/


m4[0] = 2305843009213693951;
m4[1] = isProbPrime(m4[0], 100);
