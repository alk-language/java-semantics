
detEsec(p, out f) {
  m = p.size();
  f[0] = -1; f[1] = 0;
  k = 0;
  for (i = 2; i < m; ++i) {
    // invariant:  k = f[i-1]
    // while(k >= 0 && p[k] != p[i-1]) {
    match = p[k] == p[i-1];
    while(k >= 0 && !match) {
      // invariant: exista j cu k = f^j[i-1] si
      // j este cel mai mic cu p[f^j[i-1]+1] != p[i-1]
      k = f[k]; 
      if (k >= 0) match = p[k] == p[i-1];
    }
    k = k + 1;
    f[i] = k;
  }
}

/*
p = ["a", "b", "a", "b", "a", "c", "a"];
fp = [];
detEsec(p, fp);
*/

KMP(s, p, f) {
  n = s.size(); 
  m = p.size();
  i = 0;
  k = 0;
  while (i < n) {
    while ((k != -1) && (p[k] != s[i])) 
      k = f[k];
    // k == -1 or p[k] == s[i]
    if (k == m-1)
      return i-m+1; /* gasit p in s */
    else {
      i = i+1;
      k = k+1;
    }
  }
  return -1; /* p nu apare in s */
}

p = ["a", "b", "a", "b", "a", "c", "a"];
s = ["a", "b", "a", "a", "b", "a", "b", "a", "c", "a", "a", "c", "a"];
fp = [];
detEsec(p, fp);
print(KMP(s, p, fp));
