/*
@input: A set O and a collection C of subsets of O. 
@output: A subcollection D of C such that every element of O is in exactly one set in D. 
(In other words, the union of the sets in D is O and the intersection of any two sets in D is empty.) 

*/

thereAreInAandNotInB(A, B) {
  forall x in A
    if (! (x in B))
      return true;
  return false;
}

xcover(O, C) modifies D { 
  DU = emptySet;   /* union of elements in D */
   while (thereAreInAandNotInB(O, DU)) {
     choose X in C s.t. ! thereAreInAandNotInB(X, DU);
     D.pushBack(X);
     DU = DU U X;
   }
}

D = emptyList;
xcover(O, C);


/*
O = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
C = { C1, C2, C3, C4, C5, C6, C7, C8 } where
   C1 = {1, 2, 3}
   C2 = {1, 4}
   C3 = {2, 3, 4, 5}
   C4 = {2, 3, 8, 11}
   C5 = {3, 6, 7}
   C6 = {5, 7, 9}
   C7 = {6, 10, 12}
   C8 = {6, 11}

alki xcover.alk "
   O |-> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
   C |-> {
          {1, 2, 3},
          {1, 4},
          {2, 3, 4, 5},
          {2, 3, 8, 11},
          {3, 6, 7},
          {5, 7, 9},
          {6, 10, 12},
          {6, 11}
         }"
*/