all_distinct(a : array<int>, m : int) : boolean
requires 1 <= m
requires forall i : int :: 0 <= i && i < a.size() ==> 0 <= a[i] && a[i] < m
ensures result <==> (forall i : int, j : int :: 0 <= i && i < a.size() ==>
        (0 <= j && j < a.size() ==> (i != j ==> a[i] != a[j])))
{

    // ap = [false | _ from [0..m-1]];
    ap = [];
    i = 0;
    while (i < m)
    invariant i <= m
    invariant i == ap.size()
    invariant forall k : boolean :: k in ap ==> k == false
    invariant forall k : int :: 0 <= k && k < ap.size() ==> k == false
    modifies i, ap
    {
        ap[i] = false;
        i++;
    }

    assert ap.size() == m;
    assert !(true in ap);

    k = 0;
    ok = true;
    while (k < a.size())
    invariant k <= a.size()
    invariant ok <==> (forall i : int, j : int :: 0 <= i && i < k ==>
                      (0 <= j && j < k ==> (i != j ==> a[i] != a[j])))
    {
        v = a[k];
        if (ap[v])
        {
            ok = false;
        }
        ap[v] = true;
    }

    return ok;
}

// ap = [f(x) | x from A];
// ============================== A -> array/list
// env: ap |-> $ap_0
// pc:  $ap_0.size() == A.size() && forall i : int :: 0 <= i && i < A.size() ==> ap[i] == f(A[i])

// ap = [x..y];
// ==============================
// env: ap |-> $ap_0
// pc:  $ap_0.size() == y - x + 1 && forall i : int :: 0 <= i && i < y - x + 1 ==> $ap_0[i] == x + i

// ap = [x from A | f(x)];
// $s_0
// =====================================
// env: ap |-> $ap_0
// pc: $ap_0 ==