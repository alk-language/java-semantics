/*

 Sigma ::= "a" | "b" | "c"
 
 expression ::= term ("+" term)* 
 term ::= maybeStar
        | maybeStar ("." maybeStar)* 
 maybeStar ::= factor ["*"] // equiv to  factor | factor "*"
 factor ::=
     Sigma
     | "(" expression ")"

*/


// the current position in the input
index = 0;

// the current symbol
sym() modifies index, input {
  if (index < input.size())
    return input.at(index);
  return "\0";
}

// goes to the next symbol
nextSym() modifies index, input {
  if (index < input.size()) {
    index++;
/*
    // skip the spaces
    while (input.at(index) == " " && index < input.size())
    index++;
*/
  } else
    error("nextsym: expected a symbol");
}

// prints an error message
error(msg) modifies index {
  print(msg + " at position ");
  print(index);
  print("");
}

/*
  tests if the current symbol is accepted and
  if yes, advances in the input
*/
accept(s) {
    if (sym() == s) {
        nextSym();
        return true;
    }
    return false;
}

/*
  test if the current symbol is in the alphabet Sigma and
  if yes, advances in the input
*/
acceptSigma() modifies sigma {
  for (i = 0; i < sigma.size(); ++i) 
      if (accept(sigma[i])) {
        return true;
      }
  return false;
}

// test if the current symbol is the exptected one
expect(s) {
    if (accept(s))
        return true;
    error("expect: unexpected symbol");
    return false;
}

// parses a factor and returs its AST
factor() {
    s = sym();
    if (acceptSigma()) {
      return [s,<>];
    } else if (accept("(")) {
        ast = expression();
        expect(")");
    }
        return ast;
}

// parses a maybeStar and returs its AST
maybeStar() {
    ast = factor();
    if (accept("*")) 
      return < ["_*", ast] >;
    else
      return ast;
}

// parses a term and returs its AST
/*
term() {
    ast = factor();
    list = < ast >;
    if (accept("*")) list = < ["_*", list] >;
    while (accept(".")) {
        ast1 = factor();
	if (accept("*")) list.pushBack(["_*", < ast1 >]);
	else list.pushBack(ast1);
    }
    if (list.size() > 1)
      return ["_._", list];
    else
      return list.at(0);
}
*/
term() {
    ast = maybeStar();
    list = < ast >;
    while (accept(".")) {
        ast1 = maybeStar();
        list.pushBack(ast1);
    }
    if (list.size() > 1)
      return ["_._", list];
    else
      return list.at(0);
}

// parses an epression and returs its AST
expression() {
    ast = term();
    list = < ast >;
    while (accept("+")) {
        ast = term();
	list.pushBack(ast);
    }
    if (list.size() > 1)
      return ["_+_", list];
    else
      return list.at(0);
}
// the alphabet
sigma = ["a","b","c"];
// the expression
input = "(a.b+b)*.(b.a)";
print(expression());
