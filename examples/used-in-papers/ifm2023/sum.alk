/*
User
A list initially contains the numbers 2, 3, ..., n.
At each round, the smallest number in the list is replaced by its square. If there is more than one such number, then only one of them is replaced.
Write an algorithm, in pseudo-code, that computes the sum of all numbers in the list after m rounds.

ChatGPT
Here's a pseudo-code algorithm that computes the sum of all numbers in the list after m rounds:

function computeSum(n, m):
    list = [2, 3, ..., n]  // Initialize the list with numbers 2 to n
    for round = 1 to m:
        minIndex = 0
        for i = 1 to length(list):
            if list[i] < list[minIndex]:
                minIndex = i
        list[minIndex] = list[minIndex] * list[minIndex]  // Replace the smallest number with its square
    sum = 0
    for i = 1 to length(list):
        sum = sum + list[i]  // Compute the sum of all numbers in the list
    return sum

// Example usage
n = 5
m = 3
result = computeSum(n, m)
print(result)  // Output: 66
*/

// First attempt

computeSum(n, m) {
    lst = <2..n>;  // Initialize the lst with numbers 2 to n
    for (round = 1; round <= m; ++round) {
        minIndex = 0;
        for (i = 1; i <= lst.size(); ++i) {
            if (lst.at(i) < lst.at(minIndex))
                minIndex = i;
        }
        lst.insert(minIndex, lst.at(minIndex) * lst.at(minIndex));  // Replace the smallest number with its square
    }
    sum = 0;
    for (i = 1; i <= lst.size(); ++i)
        sum = sum + lst.at(i);  // Compute the sum of all numbers in the lst
    return sum;
}


// Fixed version
/*
computeSum(n, m){
    lst = <2..n>;  // Initialize the lst with numbers 2 to n
    for (round = 1; round <= m; ++round) {
        minIndex = 0;
        for (i = 1; i < lst.size(); ++i) {
            if (lst[i] < lst[minIndex])
                minIndex = i;
        }
        lst[minIndex] = lst[minIndex] * lst[minIndex];  // Replace the smallest number with its square
    }
    sum = 0;
    for (i = 1; i <= lst.size(); ++i) {
        sum = sum + lst[i-1];  // Compute the sum of all numbers in the lst
    }
    return sum;
}
*/
// Example usage
n = 5;
m = 3;
result = computeSum(n, m);
print(result);  // Output: 66