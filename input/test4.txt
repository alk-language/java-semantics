queens(n)
@requires n : int
@requires 1 <= n
@ensures \result : array< array<int> >
@ensures true
{
    // a = [ false | i from {1..n} ];
    @havoc a : array<boolean>, b : array<boolean>, c : array<boolean>;

    for (i = 0; i < n; i++)
    @invariant 0 <= i && i <= n
    @invariant forall j : int :: 0 <= j && j < i ==> !a[j]
    {
        a[i] = false;
    }

    // b = [ false | i from {1..2*n} ];
    // c = [ false | i from {1..2*n} ];
    for (i = 0; i < 2 * n; i++)
    @invariant 0 <= i && i <= 2 * n
    @invariant forall j : int :: 0 <= j && j < i ==> !b[j]
    @invariant forall j : int :: 0 <= j && j < i ==> !c[j]
    {
        b[i] = false;
        c[i] = false;
    }

    //@havoc cb : array< array<int> >;
    //@assume cb.size() == n;
    //@assume forall i : int :: 0 <= i && i < n ==> cb[i].size() == n;

    cb = [];

    for (col = 0; col < n; ++col)
    @invariant 0 <= col && col <= n

    @invariant forall j : int :: 0 <= j && j < col ==> (exists i : int :: 0 <= i && i < n && cb[i][j] == 1)
    @invariant forall col1 : int, row : int, col2 : int:: !(cb[row][col1] == 1 && cb[row][col2] == 1)
    @invariant forall col1 : int, row1 : int, col2 : int, row2 : int :: cb[row1][col1] && cb[row2][col2] ==> row1 + col1 != row2 + col2

    // @invariant forall i : int :: 0 <= i && i < a.size() && a[i] ==> (exists j : int :: 0 <= j && j < n && cb[i][j] == 1)
    @modifies col, a, b, c, cb
    {
        choose row from {0 .. n-1};
        /*if (a[row] || b[row + col] || c[n + (row-col)])
        {
            failure;
        }*/
        a[row] = true;
        b[row + col] = true;
        c[n + (row-col)] = true;
        //a1[row]++;
        //b1[row + col]++;
        //c1[n + (row-col)]++;
        cb[row][col]++;
    }

    return cb;
}
