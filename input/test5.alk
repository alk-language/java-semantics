@havoc n : int;
@havoc a : array<int>, b : array<int>, c : array<int>, cb : array<int>;
@assume 1 <= n;

@assume a.size() == n;
@assume forall i : int :: 0 <= i && i < n ==> a[i] == 0;
@assume b.size() == 2 * n;
@assume forall i : int :: 0 <= i && i < 2 * n ==> b[i] == 0;
@assume c.size() == 2 * n;
@assume forall i : int :: 0 <= i && i < 2 * n ==> c[i] == 0;
@assume cb.size() == 0;

for (col = 0; col < n; col++)
@invariant 0 <= col && col <= n
@invariant cb.size() == col;
@invariant forall i : int :: 0 <= i && i < n ==> a[i] <= 1
@invariant forall i : int :: 0 <= i && i < 2 * n ==> b[i] <= 1
@invariant forall i : int :: 0 <= i && i < 2 * n ==> c[i] <= 1
@invariant forall i : int, j : int :: 0 <= i && i < j && j < col ==> cb[i] != cb[j]
@modifies col, a, b, c, cb
{
    choose row from {0 .. n-1} s.t. a[row] == 0 && b[row + col] == 0 && c[n + (row-col)] == 0;
    a[row]++;
    b[row + col]++;
    c[n + (row-col)]++;
    cb[col] = row;
}