/*

symbolic $n : int;

sum = 0;
n = $n;

i = 1;
while (i <= n)
// invariant sum == i * (i - 1) / 2 && i <= n + 1
{
    sum = sum + i;
    i++;
}

// sum |->
// i |->
*/

symbolic $n : int;
symbolic $i : int, $sum : int;

sum = 0;
i = 1;
n = $n;

// proof obligation 1: the invariant holds in the initial state of while
assert sum == i * (i - 1) / 2 && i <= n + 1;

// general: am ajuns la un while cu annotation de invariant
assert invariant; // in configuratia curenta

// proof obligation 2: check the loop invariant
havoc i, sum;
// asignam la variabilele care urmeaza sa fie modificate in while valori simbolice


// dupa executia buclei while
havoc i, sum;


assume invariant && !(conditia);
// continue executia

// \forall 0 <= t < w. $i(t) = $i(t - 1) + 1;


// a |-> $a_l0(t)
// a |-> $a_l1(t)

havoc a, b, c;
=============
a = fresh("a", type(a));
b = fresh("b", type(b));
c = fresh("c", type(c));