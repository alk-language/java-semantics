#include "ast.alk"

/*
 epsIn(E) stands for true if L(E) contains the empty string;
 otherwise, espIn(E) stands for 0.
*/
epsIn(ast) {
  if (ast == []) return false;
  if (root(ast) == "")  // eps
    return true;
  if (root(ast) == "_+_") {
    answ = epsIn(chld(ast, 0));
    for (i = 1; i < chldNo(ast); ++i) {
      asw = answ || epsIn(chld(ast, i));
    }
    return answ;
  } 
  if (root(ast) == "_._") {
    answ = epsIn(chld(ast, 0));
    for (i = 1; i < chldNo(ast); ++i) {
      asw = answ && epsIn(chld(ast, i)); 
    }
    return answ;
  } 
  if (root(ast) == "_*")
    return true;
  return false;
}

/*
 Brzozowski's derivatives:
 lang(der(E,a)) = {w | aw from lang(E)}
*/
der(ast, a) {
  if (ast == []) astder = [];
  else if (chldNo(ast) == 0) {
    if (root(ast) == a) astder = ["", <>]; 
    else astder = [];
  }
  else if (root(ast) == "_+_") {
    chlds = <>;
    for (i = 0; i < chldNo(ast); ++i)
      chlds.pushBack(der(chld(ast,i), a));
    astder = ["_+_", chlds];
  }
  else if (root(ast) == "_._") {
    epsInPref = true;
    chlds = < >;
    i = 0;
    while (epsInPref && i < chldNo(ast)) {
      chldsi = < der(chld(ast,i), a) >;
      for (j = i + 1; j < chldNo(ast); ++j)
        chldsi.pushBack(chld(ast,j)); 
      chlds.pushBack(["_._", chldsi]);
      epsInPref = epsIn(chld(ast, i));
      i++;
    }
    if (chlds.size() == 1)
      astder = chlds.at(0);
    else
      astder = ["_+_", chlds];
  }
  else if (ast[0] == "_*") 
    astder = ["_._", < der(chld(ast, 0), a), ast >];
  return astder;
}


getState (map, str) {
  foreach pair from map 
    if(pair[1] == str)
      return pair[0];
}


/*
  Brzozowski's automaton
*/ 
detAut(ast, Sigma) {
  state = 0;
  ast = simplify(ast);
  if (epsIn(ast))
    map = < [state, ast, "acc"] >;
  else 
    map = < [state, ast, ""] >;
  derSet = { ast };
  do {
    derSet1 = derSet;
    foreach s from Sigma 
      foreach ast from derSet1 {
        ast1 = simplify(der(ast, s));
        if (!(ast1 in derSet) && ast1 != []) {
          derSet = derSet U { ast1 };
	  state++;
	  if (epsIn(ast1)) {
            map.pushBack([state, ast1,"acc"]);
	  }
	  else
	    map.pushBack([state, ast1, ""]);
	}
      }	
  } while (derSet != derSet1);
  aut = {};
  foreach p from map
    foreach q from map 
      foreach s from Sigma
        if (q[1] == simplify(der(p[1], s)))
	  aut = aut U { < p[0], s, q[0] > };
  foreach p from map
    p[1] = ast2string(p[1]);
  return [aut, map];
}



