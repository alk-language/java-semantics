
swap(out a, i, j) {
  temp = a[i];
  a[i] = a[j];
  a[j] = temp;
}

/*
@input: a[p..q]
@output: k si a[p..q] partitionat de k
*/
partition(out a, p, q) {
  x = a[p] ; 
  i = p + 1;   j = q;
  while (i <= j) {
    if (a[i] <= x) i = i+1;
    else if (a[j] >= x) j = j-1;
    else if (a[i] > x && x > a[j]) {
      swap(a, i, j);
      i = i+1;
      j = j-1;
    }
  }
  k = i-1;  a[p] = a[k];  a[k] = x;
//  if (k == q) --k;
  return k;
}

/*
@input: a[p..q]
@output: a[p..q] sortat 
*/
qsort(out a, p, q) {
  if (p < q) {
    k = partition(a, p, q);
    qsort(a, p, k-1);
    qsort(a, k+1, q);
  }
}

b = [5,1,3,2,4];
n = 5;
qsort(b, 0, n-1);
print(b);


/*
alki qsort.alk 
*/




